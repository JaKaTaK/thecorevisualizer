// Generated by CoffeeScript 2.2.1
(function() {
  var classKeyMap, commandCards, commandClass, commandClassMap, commandDisplayMap, commandDisplayName, commandIcons, eachRace, fnJSON, germanClassKeyMap, hotkeys, indented, k, keyClass, keyClassMap, keyCodeMaps, keySizeStyles, keySizes, keyboards, loadHotkeys, preloadUrls, raceCards, raceClass, require, sizeClass, touch, unitStyles, v,
    splice = [].splice,
    indexOf = [].indexOf;

  require = process.mainModule.require;

  hotkeys = require('hotkeys.coffee');

  commandCards = hotkeys.commandCards;

  raceCards = hotkeys.raceCards;

  keyboards = require('keyboards.coffee');

  keyCodeMaps = keyboards.keyCodeMaps;

  keyboards = keyboards.keyboards;

  fnJSON = function(o) {
    return JSON.stringify(o, function(k, v) {
      if (typeof v === 'function') {
        return v.toString();
      } else {
        return v;
      }
    });
  };

  loadHotkeys = function(keyText) {
    var j, len, line, m, map, ref;
    map = {};
    ref = keyText.split('\n');
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      if (!(m = line.match(/([\w\/]+)=([\w\+,]+)/))) {
        continue;
      }
      map[m[1]] = m[2].split(',');
    }
    return map;
  };

  commandDisplayMap = {
    HellionTank: 'Hellbat'
  };

  commandDisplayName = function(command) {
    var m;
    if (m = command.match(/(ControlGroup|Camera)\w+(\d)/)) {
      return m[2];
    } else {
      return commandDisplayMap[command] || command.replace(/([a-z])([A-Z])/g, "$1 $2");
    }
  };

  commandClassMap = {};

  commandClass = function(command) {
    var m;
    if (m = command.match(/((ControlGroup|Camera)\w+)\d/)) {
      return m[1];
    } else {
      return commandClassMap[command] || command;
    }
  };

  String.prototype.repeat = function(n) {
    if (n) {
      return new Array(n + 1).join(this);
    } else {
      return '';
    }
  };

  String.prototype.trim = function() {
    return this.replace(/(^\s+|\s+$)/g, '');
  };

  touch = function() {
    return text('&nbsp;');
  };

  classKeyMap = {
    Apostrophe: '\'',
    SemiColon: ';',
    Slash: '/',
    Comma: ',',
    Grave: '`',
    BracketClose: ']',
    BracketOpen: '[',
    CapsLock: 'CAPS',
    Control: 'CTRL',
    Shift: 'SHIFT',
    Alt: 'ALT',
    Enter: 'ENTER',
    Windows: 'WIN',
    Menu: 'MENU',
    Space: 'SPACE',
    Period: '.',
    Minus: '-',
    Equals: '=',
    Backslash: '\\',
    Tab: 'TAB',
    Escape: 'ESC'
  };

  germanClassKeyMap = {
    Grave: 'ö',
    Apostrophe: 'ä',
    SemiColon: 'ü',
    BracketOpen: 'ß',
    BracketClose: '´',
    Equals: '+'
  };

  keyClassMap = {};

  for (k in classKeyMap) {
    v = classKeyMap[k];
    keyClassMap[v] = k;
  }

  for (k in germanClassKeyMap) {
    v = germanClassKeyMap[k];
    keyClassMap[v] = k;
  }

  keyClass = function(key) {
    if (voidKey(key)) {
      return 'void';
    } else {
      return keyClassMap[(key || '').split(' ')[0]] || (key || '').trim();
    }
  };

  indented = function(fn) {
    return function(...args) {
      var o, out, ref;
      ref = args, [...args] = ref, [o] = splice.call(args, -1);
      if (o === void 0) {
        o = {};
      }
      out = fn(...args, o);
      if (typeof out === 'object') {
        out = out.join('\n');
      }
      out = out.replace(/\n/g, `\n${'\t'.repeat(o.indent)}`);
      return out;
    };
  };

  sizeClass = function(size) {
    return size.toString().replace(/\./, '-');
  };

  keySizes = [0.5, 1, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 6];

  keySizeStyles = indented(function() {
    var j, len, results, size;
    results = [];
    for (j = 0, len = keySizes.length; j < len; j++) {
      size = keySizes[j];
      results.push(`key-size-width '${sizeClass(size)}', ${size}`);
    }
    return results;
  });

  unitStyles = indented(function() {
    var icons, kind, race, raceName, unit, unitName, units;
    icons = [];
    for (raceName in raceCards) {
      race = raceCards[raceName];
      for (kind in race) {
        units = race[kind];
        for (unitName in units) {
          unit = units[unitName];
          icons.push(`unit-class '${unitName}', '${unit.icon}'`);
        }
      }
    }
    return icons;
  });

  raceClass = function(raceName) {
    return raceName;
  };

  eachRace = indented(function(fn) {
    var race, results;
    results = [];
    for (race in raceCards) {
      results.push(fn(race));
    }
    return results;
  });

  commandIcons = indented(function() {
    var cat, command, commands, icons, kind, name, race, raceName, ref, ref1, unit, unitName, units;
    icons = [];
    for (raceName in raceCards) {
      race = raceCards[raceName];
      for (kind in race) {
        units = race[kind];
        for (unitName in units) {
          unit = units[unitName];
          ref = unit.commands;
          for (name in ref) {
            command = ref[name];
            icons.push(`command-icon '${name}', '${command.icon || `${name}.png`}'`);
          }
        }
      }
    }
    ref1 = commandCards.unit;
    for (cat in ref1) {
      commands = ref1[cat];
      for (name in commands) {
        command = commands[name];
        if (command.icon) {
          icons.push(`command-icon '${name}', '${command.icon || `${name}.png`}'`);
        }
      }
    }
    return icons;
  });

  preloadUrls = function() {
    var command, icon;
    return ((new Array).concat((function() {
      var results;
      results = [];
      for (command in commandIconMap) {
        icon = commandIconMap[command];
        results.push(`url('icons/${command}.png')`);
      }
      return results;
    })(), (function() {
      var results;
      results = [];
      for (command in commandUnitIconMap) {
        icon = commandUnitIconMap[command];
        results.push(`url('icons/${command.toLowerCase()}.jpg')`);
      }
      return results;
    })())).join(' ');
  };

  doctype(5);

  html(function() {
    var blankRow, containerTemplate, formatKeyCap, renderKeyboard, voidKey;
    head(function() {
      var styles;
      styles = `\nborder-radius()\n	-webkit-border-radius arguments\n	-moz-border-radius arguments\n	border-radius arguments\nselectable(yes)\n	unless yes\n		-webkit-touch-callout none;\n		-webkit-user-select none;\n		-khtml-user-select none;\n		-moz-user-select none;\n		-ms-user-select none;\n		user-select none;\ntransition()\n	transition arguments\n	-webkit-transition arguments\n	-moz-transition arguments\n	-o-transition arguments\n	-ms-transition arguments\n\nanimation()\n	animation arguments\n	-webkit-animation arguments\n	-moz-animation arguments\n	-o-animation arguments\n	-ms-animation arguments\n\ntransform()\n	transform arguments\n	-webkit-transform arguments\n	-moz-transform arguments\n	-o-transform arguments\n	-ms-transform arguments\n\nbox-shadow()\n	box-shadow arguments\n	-webkit-box-shadow arguments\n	-moz-box-shadow arguments\n	-o-box-shadow arguments\n	-ms-box-shadow arguments\ntext-shadow()\n	text-shadow arguments\n	-webkit-text-shadow arguments\n	-moz-text-shadow arguments\n	-o-text-shadow arguments\n	-ms-text-shadow arguments\n\nuiColor = #18c6c6\nuiGlowColor = #16b6b6\n\nfade(color, alpha)\n	rgba(red(color),green(color),blue(color),alpha)\n\nbody:after\n	content ${(false ? dopreloadUrls : void 0)}\n	display none\n\nbody\n	font-family 'Helvetica', sans-serif\n\nbody\n	background-color black\n	margin 0\n	padding 0 0 0 20px\n	color white\n	text-shadow white 0 0 5px\n	background-image url('gray-background.png')\n	background-position 202px 0px\n	.left-strip\n		background-image url('teal-left.png')\n		width 202px\n		height 100%\n		position absolute\n		left 0\n		top 0\n		z-index -10\n.grid\n	width 100%\n	height 100%\n	position fixed\n	z-index -1\n	// background-image url('hex_green.png')\n	background-size 80px\n	opacity 0.1\n.title\n	font-size 100px\n	color white\n	text-shadow white\n	font-family Helvetica\n	position fixed\n	z-index -5\n	right 10px\n	bottom 10px\n	opacity 1\n	font-size 45px\n	font-weight lighter\n	background-image url('the-core-alpha.png')\n	height 65px\n	width 300px\n	padding-top 300px\n	text-align center\n	background-repeat no-repeat\n	background-size 300px\n	.the\n		color #ADADAD\n		text-shadow #ADADAD 0 0 10px\n	.braces\n		color uiColor\n		text-shadow uiGlowColor 0 0 10px\n.container\n	width 920px\n	padding 10px\n	margin auto\n\n.tutorial-overlay\n	position fixed\n	top 0\n	left 0\n	width 100%\n	height 100%\n	z-index 499\n	background-color fade(black, 70%)\n\n.tutorial\n	width 700px\n	height 500px\n	padding 50px\n	padding-top 10px\n	border 4px solid fade(uiColor, 50%)\n	overflow auto\n	position absolute\n	left 50%\n	top 50%\n	margin-left -400px\n	margin-top -350px\n	z-index 500\n	border-radius 25px\n	box-shadow fade(uiColor, 30%) 0 0 10px, inset fade(uiColor, 30%) 0 0 10px\n	background-color fade(black, 70%)\n	color white\n	text-shadow fade(white, 30%) 0 0 5px\n	a\n		cursor pointer\n		display inline-block\n		margin 10px\n		padding 10px\n		box-shadow fade(white, 30%) 0 0 10px, inset fade(white, 30%) 0 0 10px\n		background-color transparent\n		transition background-color 0.5s\n		&:hover\n			box-shadow fade(uiColor, 50%) 0 0 10px, inset fade(uiColor, 50%) 0 0 10px\n		&:active,&.selected\n			background fade(uiColor, 30%)\n			box-shadow fade(uiColor, 50%) 0 0 10px, inset fade(uiColor, 50%) 0 0 10px\n\n.footer\n	width 65%\n	margin-top 10px\n	margin 10px\n	background-color fade(uiColor, 15%)\n	border 4px solid fade(uiColor, 30%)\n	box-shadow fade(uiColor, 50%) 0px 0px 10px\n	border-radius 10px\n	padding 10px\n	a\n		cursor pointer\n		margin-right 20px\n		text-decoration none\n		color white !important\n		text-shadow white 0 0 20px\n		&:hover\n			text-shadow white 0 0 5px\n\n\n.keyboard\n	height 400px\n	overflow visible\n	position relative\n	.inner\n		width 900px\n		position relative\n		transition left 1s\n	.hand\n		transition opacity 1s, transform 1s, left 1s\n		background-image url("icons/hand.png")\n		position absolute\n		z-index 300\n		background-size 65%\n		pointer-events none\n		background-repeat no-repeat\n		animation pulse-opacity 4s alternate linear infinite\n		width 483px\n		height 299px\n\n	&.display-left\n		.inner\n			left 330px\n			.mouse\n				left -260px\n		.hand\n			left 230px\n			top 123px\n			transform scaleX(-1) rotate(-9deg)\n	&.display-right\n		.inner\n			left -300px\n			.mouse\n				left 1000px\n		.hand\n			left 189px\n			top 123px\n			transform rotate(-9deg)\n	&.display-full\n		.inner\n			left 0\n			.mouse\n				opacity 0\n		.hand\n			opacity 0\n			display none\n\n\nkey-color = uiColor\nkey-width = 60px\nkey-height = key-width\nkey-border-width = 2px\nkey-margin = 2px\nkey-inner-height = key-height - key-margin * 2 - key-border-width * 2\nkey-border-radius = 3px\n\ncap-margin = key-width * 0.2\n\n.mouse\n	border-radius 50px\n\n	border key-border-width*2 solid fade(key-color, 50%)\n	box-shadow fade(key-color, 30%) 0 0 10px, inset fade(key-color, 30%) 0 0 10px\n	background-color transparent\n\n	width 150px\n	height 200px\n	padding 25px\n	position absolute\n	top 100px\n	opacity 1\n	transition opacity 1s\n	.key-ForwardMouseButton,.key-BackMouseButton\n		position absolute\n		left -20px\n		&.key-size-0-5\n			.map\n				width key-width\n				overflow visible\n				left 0 - key-width * 0.5\n	.key-ForwardMouseButton\n		top 60px\n	.key-BackMouseButton\n		top 140px\n\n.row\n	height key-height\n	float left\n	width 100%\n	&.row-0-5\n		height key-width * 0.5\n\n@keyframes pulse-background\n	0%\n		background-color fade(lighten(key-color, 10%), 5%)\n	100%\n		background-color fade(darken(key-color, 10%), 30%)\n\n@keyframes pulse-opacity\n	0%\n		opacity 0\n	100%\n		opacity 0.1\n.key\n	float left\n	position relative\n\n	&.key-void\n		background-color transparent !important\n		box-shadow none !important\n		border-color transparent !important\n\n	border-radius key-border-radius\n	margin key-margin\n\n	cursor pointer\n	selectable false\n\n	border key-border-width solid fade(key-color, 50%)\n	box-shadow fade(key-color, 30%) 0 0 5px, inset fade(key-color, 30%) 0 0 5px\n	background-color transparent\n\n	.overlay\n		position absolute\n		top -4px\n		left -4px\n		opacity 0\n		z-index 200\n		height key-inner-height\n		border-radius key-border-radius\n		transition opacity 0.3s, top 0.3s, left 0.3s\n		&.black\n			background-color fade(white, 50%)\n			box-shadow fade(white, 30%) 0 0 15px, inset fade(white, 30%) 0 0 15px\n		&.white\n			background-color fade(uiColor, 50%)\n			box-shadow fade(uiColor, 50%) 0 0 15px, inset fade(uiColor, 50%) 0 0 15px\n	&:hover\n		.overlay.white\n			opacity 1\n	&.selected\n		.overlay.black\n			top 0\n			left 0\n			opacity 1\n		.overlay.white\n			top 0\n			left 0\n			opacity 0\n		.cap,.maps\n			top 0\n			left 0\n	&.key-Control, &.key-Shift, &.key-Alt\n		animation pulse-background 3s alternate linear infinite\n		&:hover, &:active, &.selected\n			animation none\n\n	height key-inner-height\n	key-size-width(size, mult)\n		&.key-size-{size}\n			key-inner-width = (key-width * mult) - key-margin * 2 - key-border-width * 2\n			width key-inner-width\n			.map\n				width key-inner-width\n			.overlay\n				width key-inner-width\n	${keySizeStyles({
        indent: 1
      })}\n\n	.cap\n		margin-top 15px\n		text-align center\n		text-shadow black 0 0 1px\n		font-weight bold\n	.maps\n		position absolute\n		top -4px\n		left -4px\n		transition top 0.3s, left 0.3s\n	map()\n		overflow hidden\n		max-height key-height - key-margin * 2\n		margin-top 2px\n		font-size 12px\n	.map\n		map()\n		position absolute\n		top 0\n		left 0\n		&.map-command\n			z-index 1\n			background-color fade(white, 60%)\n			box-shadow uiColor 0 0 15px, inset uiColor 0 0 7px\n			text-shadow black 0 0 1px\n		&.map-global\n			z-index 10\n			background-color fade(uiColor, 30%)\n			box-shadow uiColor 0 0 7px, inset uiColor 0 0 7px\n			color white\n			text-shadow white 0 0 1px\n\n		command-icon(command, icon)\n			&.map-{command}\n				background-image url('icons/'+icon)\n				background-size contain\n				background-repeat no-repeat\n				border-radius key-border-radius\n				height key-inner-height\n				margin-top 0\n				text-indent -9999px\n				z-index 100\n		${commandIcons({
        indent: 2
      })}\n\n\n		&.command-ControlGroupRecall,&.command-ControlGroupAppend,&.command-ControlGroupAssign,&.command-CameraSave,&.command-CameraView\n			text-align center\n			font-size 20px\n			&:before, &:after\n				font-size 15px\n				display block\n				map()\n			&.unit-icon\n				text-indent 0\n		&.command-ControlGroupRecall,&.command-ControlGroupAppend,&.command-ControlGroupAssign\n			background-color fade(lightgreen, 30%)\n			box-shadow lightgreen 0 0 7px, inset lightgreen 0 0 7px\n			&:before\n				content 'Group'\n		&.command-CameraSave,&.command-CameraView\n			background-color fade(lightblue, 30%)\n			box-shadow lightblue 0 0 7px, inset lightblue 0 0 7px\n			&:before\n				content 'Camera'\n		&.command-CameraSave\n			&:after\n				content 'SET'\n				background-color fade(lightgreen, 30%)\n				box-shadow lightgreen 0 0 7px, inset lightgreen 0 0 7px\n		&.command-ControlGroupRecall\n			background-color fade(lightgreen, 30%)\n			box-shadow lightgreen 0 0 7px, inset lightgreen 0 0 7px\n			&:after\n				background-color\n				background-color fade(lightgreen, 30%)\n				box-shadow lightgreen 0 0 7px, inset lightgreen 0 0 7px\n		&.command-ControlGroupAppend\n			&:after\n				content 'ADD'\n				background-color fade(lightblue, 30%)\n				box-shadow lightblue 0 0 7px, inset lightblue 0 0 7px\n		&.command-ControlGroupAssign\n			&:after\n				content 'SET'\n				background-color fade(pink, 30%)\n				box-shadow pink 0 0 7px, inset pink 0 0 7px\n\n.settings-bar\n	height 60px\n\n	.setting\n		float right\n		select, label\n			display block\n\n\n.unit-icon\n	icon-width = 50px\n	icon-height = 50px\n	float left\n	margin 2px\n	margin-bottom 10px\n	border-radius 3px\n	width icon-width\n	height icon-height\n	background-size icon-width icon-height\n	background-repeat no-repeat\n\n	text-indent -9999px\n\n	cursor pointer\n	border-width(border-width)\n		border-width border-width\n		border-style solid\n		background-position 0 - border-width\n		width icon-width - border-width * 2\n		height icon-height - border-width * 2\n	position relative\n\n	hover-transition(time)\n		transition width time, height time, background-size time, top time, margin-bottom time\n\n	hover-transition 0.5s\n\n	hover-size = 65px\n	&.selected, &:hover\n		width hover-size\n		height hover-size\n		background-size hover-size hover-size\n		margin-bottom 0px\n	&.selected, &.selected:hover\n		top -15px\n	&:hover\n		top -7.5px\n		hover-transition 0.2s\n\n\n	unit-class(unit, icon)\n		&.unit-{unit}\n			background-image url('icons/' + icon)\n	${unitStyles({
        indent: 1
      })}\nZerg-color = #8218c6\nProtoss-color = #e6e240\nTerran-color = #c61818\n\n.races-commands\n	display block\n	position relative\n	height 225px\n\n.race-commands\n	position absolute\n	top 0\n	left 0\n	width 1100px\n	transition opacity 1s\n	opacity 1\n	z-index 10\n	&.hide\n		opacity 0\n		z-index 0\n	.unit-commands\n		float left\n		clear both\n\n\n	race-unit-icon-color(race, color)\n		&.race-{race}\n			.unit-icon\n				box-shadow color 0 0 7px, inset color 0 0 7px\n	${eachRace((function(race) {
        return `race-unit-icon-color '${race}', ${race}-color`;
      }), {
        indent: 1
      })}\n\n	.unit-commands\n		margin-top 10px\n		padding 5px\n		border-radius 15px\n		h3\n			margin 0\n			color black\n\n	race-background-color(race, color)\n		&.race-{race} .unit-commands\n			background-color fade(color, 15%)\n			border 4px solid fade(color, 30%)\n			box-shadow fade(color, 50%) 0px 0px 10px\n		&.race-{race}\n			h3\n				color fade(color, 50%)\n				text-shadow fade(color, 30%) 0px 0px 5px\n\n	${eachRace((function(race) {
        return `race-background-color '${race}', ${race}-color`;
      }), {
        indent: 1
      })}\n\n\n.races-icons\n	margin-top -60px\n	margin-bottom 5px\n	height 75px\n	display block\n	h3\n		float left\n		color fade(white, 70%)\n		text-shadow fade(white, 70%) 0 0 1px\n		font-weight normal\n	.race-icon\n		transition background-color 0.5s, border-color 0.5s\n		width 75px\n		height 75px\n		float left\n		border-width 4px\n		border-style solid\n		border-color transparent\n		border-radius 7px\n\n		cursor pointer\n		text-indent -9999px\n		race-color(race, color)\n			&.race-{race}\n				&:hover, &.selected\n					border 4px solid fade(color, 30%)\n					box-shadow fade(color, 50%) 0px 0px 10px, inset fade(color, 50%) 0px 0px 10px\n				&.selected\n					background-color fade(color, 15%)\n		${eachRace((function(race) {
        return `race-color '${race}', ${race}-color`;
      }), {
        indent: 2
      })}\n\n		background-repeat no-repeat\n		background-size contain\n		background-color transparent\n		race-background(race)\n			&.race-{race}\n				background-image url('icons/'+race+'.png')\n		${eachRace((function(race) {
        return `race-background '${race}'`;
      }), {
        indent: 2
      })}\n\n.messages\n	position absolute\n	top 20px\n	right 20px\n	text-align right\n	color white\n	text-shadow fade(white,30%) 0 0 10px\n	z-index 400\n	width 400px\n	height 400px\n	pointer-events none\n	h3\n		transition top 3s, height 3s\n		height 40px\n		margin 0\n		padding 0\n		&.hide\n			top -200px\n			height 0px\n\n		position relative\n`;
      stylus(styles);
      script({
        src: 'lib/zepto.min.js'
      });
      script({
        src: 'lib/zepto.cookie.min.js'
      });
      script({
        src: 'lib/coffeecup.js'
      });
      return script('// Google AnalyticsX\n(function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n\nga(\'create\', \'UA-57073194-1\', \'github.io\');\nga(\'send\', \'pageview\');');
    });
    blankRow = function(row) {
      return Object.keys(row).length === 0;
    };
    voidKey = function(key) {
      return key && key.match(/_\d+/);
    };
    formatKeyCap = function(key) {
      if (voidKey(key)) {
        return '&nbsp;';
      }
      return key.split(' ')[0];
    };
    renderKeyboard = function(keyboard) {
      var j, len, results, row;
      keyboard || (keyboard = this.keyboard);
      text;
      div('.mouse', function() {
        var button, ref, results, size, which;
        button = function(which, size) {
          return div(`.${which.toLowerCase()}-button.key.key-size-${sizeClass(size)}.key-${which}MouseButton`, function() {
            div('.overlay.black', touch);
            div('.overlay.white', function() {
              return div('.cap', function() {});
            });
            return div('.maps', function() {});
          });
        };
        ref = {
          Left: 1,
          Middle: 0.5,
          Right: 1,
          Forward: 0.5,
          Back: 0.5
        };
        results = [];
        for (which in ref) {
          size = ref[which];
          results.push(button(which, size));
        }
        return results;
      });
      results = [];
      for (j = 0, len = keyboard.length; j < len; j++) {
        row = keyboard[j];
        results.push(div(`.row.${(blankRow(row) ? 'row-0-5' : void 0)}`, function() {
          var key, results1, size;
          results1 = [];
          for (key in row) {
            size = row[key];
            if (typeof size === 'string') {
              size = 1;
            }
            results1.push(div(`.key.key-${keyClass(key)}.key-size-${sizeClass(size)}`, function() {
              div('.overlay.black', touch);
              div('.overlay.white', function() {
                return div('.cap', function() {
                  return formatKeyCap(key);
                });
              });
              return div('.maps', function() {});
            }));
          }
          return results1;
        }));
      }
      return results;
    };
    containerTemplate = function() {
      div('.keyboard', function() {
        div('.hand', function() {});
        return div('.inner', function() {});
      });
      // renderKeyboard keyboards['US QWERTY']
      div('.settings-bar', function() {
        div('.setting', function() {
          label('Keyboard Layout:');
          return select('.keyboard-layout', function() {
            var first, keyboard, results;
            first = true;
            results = [];
            for (keyboard in keyboards) {
              results.push(option({
                value: keyboard,
                selected: first && (first = false)
              }, function() {
                return keyboard;
              }));
            }
            return results;
          });
        });
        div('.setting', function() {
          label('Hotkeys:');
          return select('.hotkey-file', function() {
            var first, name, results;
            first = true;
            results = [];
            for (name in TheCore.currentHotkeysFiles) {
              results.push(option({
                value: name,
                selected: first && (first = false)
              }, function() {
                return name;
              }));
            }
            return results;
          });
        });
        return div('.setting', function() {
          label('Display:');
          return select('.display-side', function() {
            var first, ref, results, side, value;
            first = true;
            ref = {
              right: 'Right Side',
              left: 'Left Side',
              full: 'Full Keyboard'
            };
            results = [];
            for (value in ref) {
              side = ref[value];
              results.push(option({
                value: value,
                selected: first && (first = false)
              }, function() {
                return side;
              }));
            }
            return results;
          });
        });
      });
      div('.races-icons', function() {
        var race;
        for (race in TheCore.raceCards) {
          div(`.race-icon.race-${raceClass(race)}`, function() {
            return race;
          });
        }
        return h3('Select a unit or building to see commands');
      });
      return div('.races-commands', function() {
        var kinds, race, ref, results;
        ref = TheCore.raceCards;
        results = [];
        for (race in ref) {
          kinds = ref[race];
          results.push(div(`.race-commands.race-${raceClass(race)}`, function() {
            var kind, results1, units;
            results1 = [];
            for (kind in kinds) {
              units = kinds[kind];
              results1.push(div(`.unit-commands.kind-${kind}`, function() {
                var results2, unit, unitName;
                h3(function() {
                  return `${race} ${kind}`;
                });
                results2 = [];
                for (unitName in units) {
                  unit = units[unitName];
                  results2.push(div(`.unit-icon.unit-${unitName}`, function() {
                    return unit.displayText || unitName;
                  }));
                }
                return results2;
              }));
            }
            return results1;
          }));
        }
        return results;
      });
    };
    return body(function() {
      div('.grid', function() {});
      div('.left-strip', function() {});
      div('.title', function() {
        span('.braces', function() {
          return '{&nbsp;&nbsp;';
        });
        span('.the', function() {
          return 'The';
        });
        span('.core', function() {
          return 'Core';
        });
        return span('.braces', function() {
          return '&nbsp;&nbsp;}';
        });
      });
      div('.messages', function() {});
      div('.container', function() {});
      div('.tutorial-overlay', function() {});
      div('.tutorial', function() {
        img({
          src: 'logo-strip.png'
        });
        h1({
          style: 'text-align:center'
        }, function() {
          return 'Interactive Demo';
        });
        p(function() {
          return ' The Core is a highly-optimized alternative hotkey layout for StarCraft 2.\nInstead of looking at a list of keys, use this tool to put your hands on the keyboard and see what does what.';
        });
        h3('The Tilt');
        img({
          src: 'tilt.jpg'
        });
        p(function() {
          return 'The Core is designed to be used with your off-hand on the side of your keyboard closest to your mouse, with a tilted keyboard to keep your wrist straight.';
        });
        img({
          src: 'pull-keys.jpg'
        });
        p(function() {
          return 'You\'ll need to press Shift, Ctrl and Shift-Ctrl a lot, so you may want to remove the keys between Alt and Ctrl.';
        });
        a('.select-corelite', function() {
          return "If you're on a laptop or can't tilt your keyboard, try The Core Lite instead.";
        });
        h3('There are left- and right-handed variants, and layouts for each race as well as a generic Random layout.');
        p(function() {
          return 'Are you right- or left-handed?';
        });
        a('.select-hand.hand-Right', function() {
          return 'Right-Handed';
        });
        a('.select-hand.hand-Left', function() {
          return 'Left-Handed';
        });
        p(function() {
          return 'What is your main class? (Every layout is designed to allow off-racing. If you play all three equally, choose Random.)';
        });
        a('.select-race.race-zerg', function() {
          return 'Zerg';
        });
        a('.select-race.race-terran', function() {
          return 'Terran';
        });
        a('.select-race.race-protoss', function() {
          return 'Protoss';
        });
        a('.select-race.race-random', function() {
          return 'Random';
        });
        p(function() {
          return '(Don\'t worry, this is easy to change later.)';
        });
        return coffeescript(function() {
          var TheCore, each, j, kind, len, ones, parts, race, races, side, sides, size, sizes;
          window.TheCore = TheCore = {
            version: '',
            layoutCodeToDisplayName: function(code) {
              return `The Core ${code} ${this.version} (${this.layoutRaces[code[0]]} ${this.layoutSides[code[1]]}-Handed  ${this.layoutSizes[code[2]]})`;
            },
            layoutCodeToFileName: function(code) {
              return `TheCore ${code} ${this.version}.SC2Hotkeys`;
            }
          };
          parts = {
            layoutRaces: 'Protoss Zerg Terran Random'.split(' '),
            layoutSides: 'Right Left'.split(' '),
            layoutSizes: 'Large Medium Small'.split(' ')
          };
          for (kind in parts) {
            ones = parts[kind];
            TheCore[kind] = {};
            for (j = 0, len = ones.length; j < len; j++) {
              each = ones[j];
              TheCore[kind][each[0]] = each;
            }
          }
          [races, sides, sizes] = (function() {
            var ref, results;
            ref = [TheCore.layoutRaces, TheCore.layoutSides, TheCore.layoutSizes];
            results = [];
            for (k in ref) {
              v = ref[k];
              results.push(v);
            }
            return results;
          })();
          TheCore.layoutCodes = $.map((function() {
            var results;
            results = [];
            for (side in sides) {
              results.push((function() {
                var results1;
                results1 = [];
                for (race in races) {
                  results1.push((function() {
                    var results2;
                    results2 = [];
                    for (size in sizes) {
                      results2.push(`${race}${side}${size}`);
                    }
                    return results2;
                  })());
                }
                return results1;
              })());
            }
            return results;
          })(), function(a) {
            return $.map(a, function(n) {
              return n;
            });
          });
          return $(function() {
            var dismiss, hand, layoutSize;
            hand = race = null;
            layoutSize = 'medium';
            dismiss = function() {
              var c, code;
              c = function(s) {
                return s[0].toUpperCase();
              };
              code = `${c(race)}${c(hand)}${c(layoutSize)}`;
              $('select.hotkey-file').val(TheCore.layoutCodeToDisplayName(code)).change();
              return $('.tutorial-overlay').click();
            };
            $('.select-corelite').click(function() {
              $('select.hotkey-file').val("The Core Lite").change();
              return $('.tutorial-overlay').click();
            });
            $('.select-hand').click(function() {
              hand = this.className.match(/hand-(\w+)/)[1];
              $('.tutorial .select-hand').removeClass('selected');
              $(this).addClass('selected');
              if (race != null) {
                return dismiss();
              }
            });
            return $('.select-race').click(function() {
              var ref;
              race = (ref = this.className.match(/race-(\w+)/)) != null ? ref[1] : void 0;
              $('.tutorial .select-race').removeClass('selected');
              $(this).addClass('selected');
              if (hand != null) {
                return dismiss();
              }
            });
          });
        });
      });
      div('.footer', function() {
        a('.show-tutorial', function() {
          return 'Show Tutorial';
        });
        a({
          href: 'https://github.com/IvanVolosyuk/thecorevisualizer',
          target: 'blank'
        }, function() {
          return 'About';
        });
        return coffeescript(function() {
          return $('.footer .show-tutorial').on('click', function() {
            return $('.tutorial,.tutorial-overlay').show();
          });
        });
      });
      script(`window.containerTemplate = ${containerTemplate.toString()};`);
      script(`window.keyboards = ${JSON.stringify(keyboards)};`);
      script(`window.keyCodeMaps = ${JSON.stringify(keyCodeMaps)};`);
      script(`window.keyboardTemplate = ${renderKeyboard.toString()};`);
      script(`window.touch = ${touch.toString()};`);
      script(`window.blankRow = ${blankRow.toString()};`);
      script(`window.formatKeyCap = ${formatKeyCap.toString()};`);
      script(`window.sizeClass = ${sizeClass.toString()};`);
      script(`window.raceClass = ${raceClass.toString()};`);
      script(`window.keyClassMap = ${JSON.stringify(keyClassMap)};`);
      script(`window.voidKey = ${voidKey.toString()};`);
      script(`window.keyClass = ${keyClass.toString()};`);
      script(`window.commandDisplayMap = ${JSON.stringify(commandDisplayMap)};`);
      script(`window.commandDisplayName = ${commandDisplayName.toString()};`);
      script(`window.commandClassMap = ${JSON.stringify(commandClassMap)};`);
      script(`window.commandClass = ${commandClass.toString()};`);
      script(`window.loadHotkeys = ${loadHotkeys.toString()};`);
      script(`TheCore.raceCards = ${fnJSON(raceCards)};`);
      script(`TheCore.commandCards = ${fnJSON(commandCards)};`);
      coffeescript(function() {
        return window.nextTick = function(cb) {
          return setTimeout(cb, 0);
        };
      });
      coffeescript(function() {
        var ref, val;
        TheCore.hotkeysForKeyboard = {};
        TheCore.loadTheCoreForKeyboard = function(keyboard, cb) {
          var code, hotkeysFiles, j, len, loadHotkeysFile, n, path, prefix, ref;
          n = null;
          TheCore.currentKeyboard = keyboard;
          if ((TheCore.currentHotkeysFiles = TheCore.hotkeysForKeyboard[keyboard])) {
            nextTick(renderContainer);
            return;
          }
          hotkeysFiles = TheCore.currentHotkeysFiles = TheCore.hotkeysForKeyboard[keyboard] = {};
          loadHotkeysFile = function(name, path) {
            hotkeysFiles[name] = null;
            n += 1;
            return $.get(path, function(file) {
              hotkeysFiles[name] = file;
              console.log('loaded hotkey file', name, path, file.length);
              if (!(n -= 1)) {
                return renderContainer();
              }
            });
          };
          n = 0;
          prefix = `hotkeys/${(keyboard === 'USQwerty' ? '' : keyboard + '/')}`;
          ref = TheCore.layoutCodes;
          for (j = 0, len = ref.length; j < len; j++) {
            code = ref[j];
            path = `${prefix}${TheCore.layoutCodeToFileName(code)}`;
            loadHotkeysFile(TheCore.layoutCodeToDisplayName(code), path);
          }
          if (keyboard === 'USQwerty') {
            loadHotkeysFile("The Core Lite", 'others/TheCore Lite.SC2Hotkeys');
            loadHotkeysFile("The Chameleon", 'others/Chameleon 2.0.SC2Hotkeys');
            return loadHotkeysFile("HotS Standard", 'others/Standard.SC2Hotkeys');
          }
        };
        TheCore.currentKeyboard = (ref = (val = $.fn.cookie('keyboard-layout-val')), indexOf.call("USQwerty USDvorak FrenchAzerty German USColemak".split(' '), ref) >= 0) ? val : 'USQwerty';
        console.log('Loading keyboard', TheCore.currentKeyboard);
        return TheCore.loadTheCoreForKeyboard(TheCore.currentKeyboard);
      });
      coffeescript(function() {
        return String.prototype.trim = function() {
          return this.replace(/(^\s+|\s+$)/g, '');
        };
      });
      return coffeescript(function() {
        window.scanHotkeys = function() {
          var cname, code, details, kind, kinds, out, race, ref, ref1, unit, unitName, units;
          out = "";
          ref = TheCore.raceCards;
          for (race in ref) {
            kinds = ref[race];
            for (kind in kinds) {
              units = kinds[kind];
              for (unitName in units) {
                unit = units[unitName];
                ref1 = unit.commands;
                for (cname in ref1) {
                  details = ref1[cname];
                  code = details.hotkeyCode || cname;
                  if (code.match(/\//)) {
                    if (!TheCore.currentHotkeys[code]) {
                      if (TheCore.currentHotkeys[code.split('/')[0]]) {
                        console.log(`${(code.split('/')[0])} should be ${code}`, {
                          it: TheCore.currentHotkeys[code.split('/')[0]]
                        });
                        out += `${code}=${TheCore.currentHotkeys[code.split('/')[0]].join(',')}\n`;
                      }
                    }
                  }
                }
              }
            }
          }
          return console.log('additions', out);
        };
        return window.renderContainer = function() {
          var Unit, attr, clearMaps, currentGroup, currentHotkeys, currentKeyboard, currentMods, currentUnit, debounceTimer, globalState, highlightModKeys, hotkeysFile, hotkeysFiles, i, key, keyPress, keyRelease, modKeyAttrs, modKeys, mouseButtons, selectedUnit, sendMessage, showCurrentUnitMaps, showGlobalMaps, showMapsForUnit, val, which, windowHandler;
          currentKeyboard = TheCore.currentKeyboard;
          hotkeysFiles = TheCore.currentHotkeysFiles;
          loadHotkeys(((function() {
            var results;
            results = [];
            for (k in hotkeysFiles) {
              v = hotkeysFiles[k];
              results.push(v);
            }
            return results;
          })())[0]);
          $('.container').html(coffeecup.render(containerTemplate));
          $('select.keyboard-layout').val(currentKeyboard);
          $('.keyboard .inner').html(coffeecup.render(keyboardTemplate, {
            keyboard: keyboards[currentKeyboard],
            hardcode: {touch, sizeClass, blankRow, formatKeyCap}
          }));
          currentMods = [];
          currentGroup = [];
          currentUnit = null;
          TheCore.currentHotkeys = currentHotkeys = {};
          globalState = {
            currentUnit: null,
            controlGroup: (function() {
              var j, results;
              results = [];
              for (i = j = 0; j <= 9; i = ++j) {
                results.push(null);
              }
              return results;
            })()
          };
          sendMessage = function(text, kind) {
            var message;
            if (text) {
              message = $(`<h3 class='${kind}'>${text}</h3>`);
              $('.messages').append(message);
              setTimeout((function() {
                return message.addClass('hide');
              }), 1000);
              return setTimeout((function() {
                return message.remove();
              }), 5000);
            }
          };
          Unit = (function() {
            class Unit {
              constructor(race1, kind1, name1) {
                var base, command, inherited, j, key, l, len, len1, name, path, ref, ref1, ref2;
                this.race = race1;
                this.kind = kind1;
                this.name = name1;
                this.icon = $(`.unit-icon.unit-${this.name}`);
                this.card = TheCore.raceCards[this.race][this.kind][this.name];
                this.commands = this.card.commands;
                if (this.commands.inherit) {
                  ref = this.commands.inherit;
                  for (j = 0, len = ref.length; j < len; j++) {
                    path = ref[j];
                    path = path.split('.');
                    inherited = TheCore.commandCards;
                    while (path.length) {
                      inherited = inherited[path.shift()];
                    }
                    for (k in inherited) {
                      v = inherited[k];
                      if ((base = this.commands)[k] == null) {
                        base[k] = v;
                      }
                    }
                  }
                }
                ref1 = this.commands;
                for (name in ref1) {
                  command = ref1[name];
                  ref2 = ['if', 'on'];
                  for (l = 0, len1 = ref2.length; l < len1; l++) {
                    key = ref2[l];
                    if (typeof command[key] === 'string') {
                      command[key] = eval(`(${command[key]})`);
                    }
                  }
                }
              }

              static fromIcon($icon) {
                var kind, race, unit;
                race = (($icon.closest('.race-commands'))[0].className.match(/race-commands race-(\w+)/))[1];
                kind = (($icon.closest('.unit-commands'))[0].className.match(/unit-commands kind-(\w+)/))[1];
                unit = (($icon.closest('.unit-icon'))[0].className.match(/unit-icon unit-(\w+)/))[1];
                return new Unit(race, kind, unit);
              }

            };

            Unit.prototype.globalState = globalState;

            return Unit;

          }).call(this);
          showMapsForUnit = function(unit) {
            var $map, $maps, command, key, keys, mod, mods, name, ref, results;
            ref = unit.commands;
            results = [];
            for (name in ref) {
              command = ref[name];
              if (typeof command.if === 'function') {
                if (!command.if.call(unit)) {
                  continue;
                }
              }
              if (!(keys = currentHotkeys[command.hotkeyCode || name])) {
                continue;
              }
              results.push((function() {
                var j, len, ref1, results1;
                results1 = [];
                for (j = 0, len = keys.length; j < len; j++) {
                  key = keys[j];
                  ref1 = key.split('+'), [...mods] = ref1, [key] = splice.call(mods, -1);
                  if (mods && (indexOf.call((function() {
                    var l, len1, results2;
                    results2 = [];
                    for (l = 0, len1 = currentMods.length; l < len1; l++) {
                      mod = currentMods[l];
                      results2.push(indexOf.call(mods, mod) >= 0);
                    }
                    return results2;
                  })(), false) >= 0 || indexOf.call((function() {
                    var l, len1, results2;
                    results2 = [];
                    for (l = 0, len1 = mods.length; l < len1; l++) {
                      mod = mods[l];
                      results2.push(indexOf.call(currentMods, mod) >= 0);
                    }
                    return results2;
                  })(), false) >= 0)) {
                    continue;
                  }
                  $maps = $(`.keyboard .key.key-${keyClass(key)} .maps`);
                  results1.push($map = $maps.append(`<div class='map map-command map-${name} command-${commandClass(name)}'>${command.displayText || name}</div>`));
                }
                return results1;
              })());
            }
            return results;
          };
          showGlobalMaps = function() {
            var $map, $maps, command, key, keys, m, mod, mods, name, ref, results, unit;
            ref = TheCore.commandCards.global;
            results = [];
            for (name in ref) {
              command = ref[name];
              if (command.if) {
                if (typeof command.if === 'string') {
                  command.if = eval(`(${command.if})`);
                }
                if (!command.if.call(globalState)) {
                  continue;
                }
              }
              if (!(keys = currentHotkeys[command.hotkeyCode || name])) {
                continue;
              }
              results.push((function() {
                var j, len, ref1, results1;
                results1 = [];
                for (j = 0, len = keys.length; j < len; j++) {
                  key = keys[j];
                  ref1 = key.split('+'), [...mods] = ref1, [key] = splice.call(mods, -1);
                  if (mods && (indexOf.call((function() {
                    var l, len1, results2;
                    results2 = [];
                    for (l = 0, len1 = currentMods.length; l < len1; l++) {
                      mod = currentMods[l];
                      results2.push(indexOf.call(mods, mod) >= 0);
                    }
                    return results2;
                  })(), false) >= 0 || indexOf.call((function() {
                    var l, len1, results2;
                    results2 = [];
                    for (l = 0, len1 = mods.length; l < len1; l++) {
                      mod = mods[l];
                      results2.push(indexOf.call(currentMods, mod) >= 0);
                    }
                    return results2;
                  })(), false) >= 0)) {
                    continue;
                  }
                  if (name.match(/^Observe|Leader|Toggle|Replay|Stats/)) {
                    continue;
                  }
                  $maps = $(`.keyboard .key.key-${keyClass(key)} .maps`);
                  if ((m = name.match(/ControlGroup\w+(\d)/))) {
                    unit = globalState.controlGroup[m[1]];
                  }
                  results1.push($map = $maps.append(`<div class='map map-global map-${name} command-${commandClass(name)} ${(unit ? `unit-icon unit-${unit.name}` : void 0)}'>${command.keyCap || command.displayText || name}</div>`));
                }
                return results1;
              })());
            }
            return results;
          };
          clearMaps = function() {
            return $('.keyboard .map').remove();
          };
          selectedUnit = null;
          debounceTimer = null;
          $('.races-icons').on('click', '.race-icon', function() {
            var $icon, race;
            $icon = $(this);
            race = (this.className.match(/race-icon race-(\w+)/))[1];
            $.fn.cookie('race-selected', race, {
              expires: 30
            });
            $('.race-commands').addClass('hide');
            $('.races-icons .race-icon').removeClass('selected');
            $icon.addClass('selected');
            $(`.race-commands.race-${race}`).removeClass('hide');
            return $('.unit-icon.selected').click();
          });
          // $('.races-commands').on 'mouseenter', '.unit-icon', ->
          // 	do clearMaps
          // 	do showGlobalMaps
          // 	showMapsForUnit Unit.fromIcon($(this))
          showCurrentUnitMaps = function() {
            clearMaps();
            if (currentUnit != null) {
              showMapsForUnit(currentUnit);
            }
            showGlobalMaps();
            if (debounceTimer) {
              clearTimeout(debounceTimer);
              return debounceTimer = null;
            }
          };
          $('.races-commands').on('click', '.unit-icon', function() {
            var $el;
            $el = $(this);
            globalState.select(Unit.fromIcon($el));
            return sendMessage(`Select ${currentUnit.displayText || currentUnit.name.replace(/([a-z])([A-Z])/g, '$1 $2')}`);
          });
          globalState.select = function(unit) {
            var $el;
            if (!unit) {
              return;
            }
            $el = unit.icon;
            $.fn.cookie('unit-selected', unit.name, {
              expires: 30
            });
            $('.races-commands .unit-icon.selected').removeClass('selected');
            $el.addClass('selected');
            this.currentUnit = currentUnit = unit;
            return showCurrentUnitMaps();
          };
          globalState.selectNew = function(...args) {
            return this.select(new Unit(...args));
          };
          // $('.races-commands').on 'mouseleave', '.unit-icon', ->
          // 	do showCurrentUnitMaps
          modKeyAttrs = {
            ctrlKey: 'Control',
            altKey: 'Alt',
            metaKey: 'Alt',
            shiftKey: 'Shift'
          };
          modKeys = (function() {
            var results;
            results = [];
            for (attr in modKeyAttrs) {
              key = modKeyAttrs[attr];
              results.push(key);
            }
            return results;
          })();
          highlightModKeys = function() {
            $(((function() {
              var results;
              results = [];
              for (attr in modKeyAttrs) {
                key = modKeyAttrs[attr];
                results.push(`.keyboard .key-${key}`);
              }
              return results;
            })()).join(',')).removeClass('selected');
            return $(((function() {
              var j, len, results;
              results = [];
              for (j = 0, len = currentMods.length; j < len; j++) {
                key = currentMods[j];
                results.push(`.keyboard .key-${key}`);
              }
              return results;
            })()).join(',')).addClass('selected');
          };
          keyPress = function(key) {
            var $key, command, j, len, m, map, ref, ref1;
            if (key === 'void') {
              return;
            }
            if (indexOf.call(modKeys, key) >= 0) {
              if (indexOf.call(currentMods, key) < 0) {
                currentMods.push(key);
                highlightModKeys();
                return showCurrentUnitMaps();
              }
            } else {
              $key = $(`.keyboard .key-${key}`).addClass('selected');
              ref = $key.find('.map');
              for (j = 0, len = ref.length; j < len; j++) {
                map = ref[j];
                if (m = map.className.match(/map-global map-(\w+)/)) {
                  if ((ref1 = m[1]) === 'Select' || ref1 === 'Interact') {
                    return;
                  }
                  command = TheCore.commandCards.global[m[1]];
                  if (command != null ? command.on : void 0) {
                    if (typeof command.on === 'string') {
                      command.on = eval(`(${command.on})`);
                    }
                    command.on.call(globalState);
                  }
                  sendMessage(command.displayText || m[1].replace(/([a-z])([A-Z])/g, '$1 $2'));
                } else if (m = map.className.match(/map-command map-(\w+)/)) {
                  command = currentUnit != null ? currentUnit.commands[m[1]] : void 0;
                  if (command.on) {
                    command.on.call(currentUnit);
                  }
                  sendMessage(command.displayText || m[1].replace(/([a-z])([A-Z])/g, '$1 $2'));
                  showCurrentUnitMaps();
                }
                break;
              }
            }
          };
          keyRelease = function(key) {
            if (key === 'void') {
              return;
            }
            if (indexOf.call(modKeys, key) >= 0) {
              if (indexOf.call(currentMods, key) >= 0) {
                currentMods.splice(currentMods.indexOf(key), 1);
                highlightModKeys();
                return showCurrentUnitMaps();
              }
            } else {
              return $(`.keyboard .key-${key}`).removeClass('selected');
            }
          };
          $(window).on('keydown keyup', windowHandler = function(e) {
            var keyFn, ref;
            currentMods = (function() {
              var results;
              results = [];
              for (attr in modKeyAttrs) {
                key = modKeyAttrs[attr];
                if (e[attr]) {
                  results.push(key);
                }
              }
              return results;
            })();
            console.log(key, e.keyCode, currentMods);
            highlightModKeys();
            key = keyClass((ref = keyCodeMaps[currentKeyboard][e.keyCode]) != null ? ref.toUpperCase() : void 0);
            keyFn = (function() {
              switch (e.type) {
                case 'keydown':
                  return keyPress;
                case 'keyup':
                  return keyRelease;
              }
            })();
            if (key.match(/^\w+$/)) {
              keyFn(key);
            }
            e.preventDefault();
            return showCurrentUnitMaps();
          });
          $('.keyboard').on('mousedown', '.key', function(e) {
            var $key;
            $key = $(this);
            key = this.className.match(/key key-(\w+)/)[1];
            return keyPress(key);
          });
          $('.keyboard').on('mouseup', '.key', function(e) {
            var $key;
            $key = $(this);
            key = this.className.match(/key key-(\w+)/)[1];
            return keyRelease(key);
          });
          mouseButtons = (function() {
            var j, len, ref, results;
            ref = [null, 'Left', 'Middle', 'Right', 'Forward', 'Back'];
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              which = ref[j];
              results.push(`${which}MouseButton`);
            }
            return results;
          })();
          $('body').on('contextmenu', function(e) {
            if (!(currentMods.length > 0)) {
              return false;
            }
          });
          $('body').on('mousedown', function(e) {
            key = mouseButtons[e.which];
            return keyPress(key);
          });
          $('body').on('mouseup', function(e) {
            key = mouseButtons[e.which];
            return keyRelease(key);
          });
          $('select.display-side').change(function() {
            var side;
            $('.keyboard').removeClass(((function() {
              var j, len, ref, results;
              ref = ['left', 'right', 'full'];
              results = [];
              for (j = 0, len = ref.length; j < len; j++) {
                side = ref[j];
                results.push(`display-${side}`);
              }
              return results;
            })()).join(' '));
            $('.keyboard').addClass(`display-${$(this).val()}`);
            return $.fn.cookie('display-side-val', $(this).val(), {
              expires: 30
            });
          });
          $('select.hotkey-file').change(function() {
            var filename, race, ref;
            filename = $(this).val();
            TheCore.currentHotkeys = currentHotkeys = loadHotkeys(hotkeysFiles[filename]);
            $.fn.cookie('hotkey-file-val', filename, {
              expires: 30
            });
            if (filename.match(/Left/)) {
              $('select.display-side').val('left').change();
            } else if (filename.match(/Right/)) {
              $('select.display-side').val('right').change();
            } else {
              $('select.display-side').val('full').change();
            }
            if ((race = (ref = filename.match(/(Zerg|Protoss|Terran)/)) != null ? ref[1] : void 0)) {
              $(`.race-icon.race-${race}`).click();
            } else if (filename.match(/Random/)) {
              race = 'Zerg Protoss Terran'.split(' ')[Math.floor(Math.random() * 3)];
              $(`.race-icon.race-${race}`).click();
            }
            return showCurrentUnitMaps();
          });
          $('select.keyboard-layout').change(function() {
            currentKeyboard = $(this).val();
            $.fn.cookie('keyboard-layout-val', currentKeyboard, {
              expires: 30
            });
            $(window).unbind(windowHandler);
            return TheCore.loadTheCoreForKeyboard(currentKeyboard);
          });
          $('select.display-side').val($.fn.cookie('display-side-val') || $('select.display-side option')[0].value).change();
          hotkeysFile = (val = $.fn.cookie('hotkey-file-val')) ? hotkeysFiles[val] ? val : ($.fn.cookie('tutorial-dismiss', false), $('select.hotkey-file option')[0].value) : $('select.hotkey-file option')[0].value;
          $('select.hotkey-file').val(hotkeysFile).change();
          showCurrentUnitMaps();
          $(`.race-icon.race-${$.fn.cookie('race-selected') || 'Terran'}`).click();
          $(`.unit-icon.unit-${$.fn.cookie('unit-selected') || 'SCV'}`).click();
          $('.tutorial-overlay').on('click', function() {
            $('.tutorial-overlay,.tutorial').hide();
            return $.fn.cookie('tutorial-dismiss', true, {
              expires: 30
            });
          });
          if ($.fn.cookie('tutorial-dismiss') && $.fn.cookie('tutorial-dismiss') !== 'false') {
            return $('.tutorial-overlay').click();
          }
        };
      });
    });
  });

}).call(this);
